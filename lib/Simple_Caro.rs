/* automatically generated by rust-bindgen 0.72.0 */

pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of max_align_t"][::std::mem::size_of::<max_align_t>() - 32usize];
    ["Alignment of max_align_t"][::std::mem::align_of::<max_align_t>() - 16usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce1"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce1) - 0usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce2"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce2) - 16usize];
};
pub const CARO_PARTICIPANT_CARO_PLAYER1: CARO_PARTICIPANT = 0;
pub const CARO_PARTICIPANT_CARO_PLAYER2: CARO_PARTICIPANT = 1;
pub type CARO_PARTICIPANT = ::std::os::raw::c_uint;
pub const CARO_RULE_TYPE_CARO_TIC_TAC_TOE: CARO_RULE_TYPE = 0;
pub const CARO_RULE_TYPE_CARO_FOUR_BLOCK_1: CARO_RULE_TYPE = 1;
pub const CARO_RULE_TYPE_CARO_FIVE_BLOCK_2: CARO_RULE_TYPE = 2;
pub type CARO_RULE_TYPE = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CARO_Coordinate {
    pub x: ::std::os::raw::c_long,
    pub y: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CARO_Coordinate"][::std::mem::size_of::<CARO_Coordinate>() - 16usize];
    ["Alignment of CARO_Coordinate"][::std::mem::align_of::<CARO_Coordinate>() - 8usize];
    ["Offset of field: CARO_Coordinate::x"][::std::mem::offset_of!(CARO_Coordinate, x) - 0usize];
    ["Offset of field: CARO_Coordinate::y"][::std::mem::offset_of!(CARO_Coordinate, y) - 8usize];
};
pub const CARO_TILE_STATE_CARO_TILE_EMPTY: CARO_TILE_STATE = 0;
pub const CARO_TILE_STATE_CARO_TILE_PLAYER1: CARO_TILE_STATE = 1;
pub const CARO_TILE_STATE_CARO_TILE_PLAYER2: CARO_TILE_STATE = 2;
pub type CARO_TILE_STATE = ::std::os::raw::c_uint;
pub const CARO_MOVE_RESULT_CARO_SUCCESS: CARO_MOVE_RESULT = 0;
pub const CARO_MOVE_RESULT_CARO_ALREADY_OCCUPIED: CARO_MOVE_RESULT = 1;
pub const CARO_MOVE_RESULT_CARO_WRONG_TURN: CARO_MOVE_RESULT = 2;
pub const CARO_MOVE_RESULT_CARO_OUT_OF_BOUNDS: CARO_MOVE_RESULT = 3;
pub type CARO_MOVE_RESULT = ::std::os::raw::c_uint;
pub const CARO_GAME_STATE_CARO_PLAYER1_TURN: CARO_GAME_STATE = 0;
pub const CARO_GAME_STATE_CARO_PLAYER2_TURN: CARO_GAME_STATE = 1;
pub const CARO_GAME_STATE_CARO_PLAYER1_WON: CARO_GAME_STATE = 2;
pub const CARO_GAME_STATE_CARO_PLAYER2_WON: CARO_GAME_STATE = 3;
pub const CARO_GAME_STATE_CARO_DREW: CARO_GAME_STATE = 4;
pub const CARO_GAME_STATE_CARO_NOT_INPROGRESS: CARO_GAME_STATE = 5;
pub type CARO_GAME_STATE = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CARO_Board_Struct {
    pub board: *mut *mut CARO_TILE_STATE,
    pub width: ::std::os::raw::c_long,
    pub height: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CARO_Board_Struct"][::std::mem::size_of::<CARO_Board_Struct>() - 24usize];
    ["Alignment of CARO_Board_Struct"][::std::mem::align_of::<CARO_Board_Struct>() - 8usize];
    ["Offset of field: CARO_Board_Struct::board"]
        [::std::mem::offset_of!(CARO_Board_Struct, board) - 0usize];
    ["Offset of field: CARO_Board_Struct::width"]
        [::std::mem::offset_of!(CARO_Board_Struct, width) - 8usize];
    ["Offset of field: CARO_Board_Struct::height"]
        [::std::mem::offset_of!(CARO_Board_Struct, height) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CARO_Moves_Set {
    pub moves_set: *mut CARO_Coordinate,
    pub length: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CARO_Moves_Set"][::std::mem::size_of::<CARO_Moves_Set>() - 16usize];
    ["Alignment of CARO_Moves_Set"][::std::mem::align_of::<CARO_Moves_Set>() - 8usize];
    ["Offset of field: CARO_Moves_Set::moves_set"]
        [::std::mem::offset_of!(CARO_Moves_Set, moves_set) - 0usize];
    ["Offset of field: CARO_Moves_Set::length"]
        [::std::mem::offset_of!(CARO_Moves_Set, length) - 8usize];
};
unsafe extern "C" {
    pub fn caro_init_game() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn caro_deinit_game(gid_: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn caro_set_board_size(
        gid_: ::std::os::raw::c_int,
        width_: ::std::os::raw::c_int,
        height_: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn caro_set_rule(gid_: ::std::os::raw::c_int, rule_: CARO_RULE_TYPE);
}
unsafe extern "C" {
    pub fn caro_unset_rule(gid_: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn caro_start(gid_: ::std::os::raw::c_int, first_turn_: CARO_GAME_STATE);
}
unsafe extern "C" {
    pub fn caro_stop(gid_: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn caro_player_move(
        gid_: ::std::os::raw::c_int,
        who_: CARO_PARTICIPANT,
        move_: CARO_Coordinate,
    ) -> CARO_MOVE_RESULT;
}
unsafe extern "C" {
    pub fn caro_player_undo(
        gid_: ::std::os::raw::c_int,
        who_: CARO_PARTICIPANT,
    ) -> CARO_MOVE_RESULT;
}
unsafe extern "C" {
    pub fn caro_player_redo(
        gid_: ::std::os::raw::c_int,
        who_: CARO_PARTICIPANT,
    ) -> CARO_MOVE_RESULT;
}
unsafe extern "C" {
    pub fn caro_switch_turn(gid_: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn caro_get_board(gid_: ::std::os::raw::c_int, data_: *mut CARO_Board_Struct);
}
unsafe extern "C" {
    pub fn caro_get_state(gid_: ::std::os::raw::c_int) -> CARO_GAME_STATE;
}
unsafe extern "C" {
    pub fn caro_is_over(gid_: ::std::os::raw::c_int) -> bool;
}
unsafe extern "C" {
    pub fn caro_get_moves_history(
        gid_: ::std::os::raw::c_int,
        data_: *mut CARO_Moves_Set,
        who_: CARO_PARTICIPANT,
    );
}
unsafe extern "C" {
    pub fn caro_get_undone_moves(
        gid_: ::std::os::raw::c_int,
        data_: *mut CARO_Moves_Set,
        who_: CARO_PARTICIPANT,
    );
}
unsafe extern "C" {
    pub fn caro_free_board(data_: *mut CARO_Board_Struct);
}
unsafe extern "C" {
    pub fn caro_free_move_set(data_: *mut CARO_Moves_Set);
}
